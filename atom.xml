<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简恒の博客</title>
  
  <subtitle>求于至简，归于永恒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://google12071.github.io/"/>
  <updated>2019-10-13T10:32:45.654Z</updated>
  <id>https://google12071.github.io/</id>
  
  <author>
    <name>google12071</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zookeeper应用-分布式锁</title>
    <link href="https://google12071.github.io/2019/10/13/Zookeeper%E5%BA%94%E7%94%A8-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://google12071.github.io/2019/10/13/Zookeeper应用-分布式锁/</id>
    <published>2019-10-13T10:22:55.000Z</published>
    <updated>2019-10-13T10:32:45.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper应用-分布式锁"><a href="#Zookeeper应用-分布式锁" class="headerlink" title="Zookeeper应用-分布式锁"></a>Zookeeper应用-分布式锁</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><ul><li><p>为什么需要分布式锁?</p><p>单机环境，应用程序都部署在同一台服务器上，并发环境下为了控制多线程对临界资源的安全访问，我们通常可以加锁实现，单机环境下的多线程同属于同一个JVM中的同一个进程之内，可通过Java锁机制确保线程安全，但分布式环境下应用程序部署于多台机器，当多台机器并发执行相同的应用程序时，就有可能出现问题，比如消息推送服务部署于A，B两台机器，当同时触发发送系统消息时，若不加控制，用户就可能收到2条重复的消息，基于此类场景，需要分布式的锁来协调分布式服务的并发调用。例如存在以下场景：</p><ul><li>变量A存在于JVM1、JVM2、JVM3三个内存中</li><li>请求1、2、3到达时对变量进行操作，因为变量A存储于3个不同的JVM内存区域，显然变量操作不具备可见性</li><li>并发下需要维护变量数据A的一致性，确保各个节点数据同步</li></ul><p>这种应用场景下分布式锁被引入用于协调和控制分布式服务调用，确保数据一致性。</p><p><img src="https://s2.ax1x.com/2019/10/13/uvbamd.png" alt="分布式服务访问"></p></li><li><p>分布式锁基本条件</p><ul><li>分布式环境下，同一时间一个方法仅能被一台机器的一个线程执行</li><li>获取与释放锁高可用</li><li>获取于释放锁高性能</li><li>锁可重入</li><li>锁具备失效机制，防止持有锁的线程崩溃造成死锁</li><li>非阻塞，没有争抢到锁的线程直接返回或获取锁失败</li></ul></li><li><p>常见分布式锁解决方案<br>业界有很多分布式锁的实现方案，比较常见的有基于Redis缓存、基于数据库等，本文主要针对zookeeper分布式锁分析实现，基于Redis和数据库仅作原理性介绍，本文不深入探讨。</p><ul><li><p>基于Redis</p><p>Redis天然具备高性能、单线程的特性，可以利用其特性实现分布式锁，主要使用setnx加锁，并对锁设置超时时间，超时时自动释放锁，改方案要注意加锁及解锁姿势；基于数据库的核心思想主要是利用数据库唯一约束确保多线程互斥执行，此方案依赖数据库服务的可用性，会增加数据库压力，现实中很少用。</p><p>zookeeper是一个分布式服务协调框架，内部结构类似于unix文件系统，是一种树型结构，但与文件系统不同的时，其路径节点上可以存储数据znode。zookeeper具有持久节点和临时节点2种并且可维护有序性，当客户端与服务器断开连接时，临时节点自动删除，基于临时节点+有序性+watch机制就可以非常简单方便的实现zookeeper分布式锁。</p><a id="more"></a></li></ul></li></ul><h3 id="二、基于Zookeeper分布式锁原理"><a href="#二、基于Zookeeper分布式锁原理" class="headerlink" title="二、基于Zookeeper分布式锁原理"></a>二、基于Zookeeper分布式锁原理</h3><ul><li><p>zookeeper获取分布式锁原理图</p><p>关于zookeeper znode、临时节点、有序性、watch机制等概念，不做过多介绍，网络上相关资料已经非常多，可自行查阅，zookeeper分布式锁的整体流程如下图：</p></li></ul><p><img src="https://s2.ax1x.com/2019/10/13/uv7DHI.png" alt="zookeeper分布式锁原理"></p><h3 id="三、Zookeeper分布式锁实践"><a href="#三、Zookeeper分布式锁实践" class="headerlink" title="三、Zookeeper分布式锁实践"></a>三、Zookeeper分布式锁实践</h3><ul><li>临时节点+有序性+watch机制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于zookeeper的分布式锁:</span></span><br><span class="line"><span class="comment"> *   利用临时顺序节点来实现分布式锁</span></span><br><span class="line"><span class="comment"> *   获取锁：取顺序号（类似银行排队拿号），判断自己的序号是否最小，若是则获得锁，否则注册前一个兄弟节点watcher，则阻塞等待</span></span><br><span class="line"><span class="comment"> *   释放锁：删除自己创建的临时顺序节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkDistributeAdvanceLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ZkDistributeAdvanceLock.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//协调线程的等待和唤醒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch downLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//锁节点目录</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//zookeeper连接客户端</span></span><br><span class="line">    <span class="keyword">private</span> ZkClient zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;String&gt; currentPath = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个兄弟节点路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;String&gt; beforePath = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可重入计数</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; reenterCount = ThreadLocal.withInitial(() -&gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZkDistributeAdvanceLock</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path == <span class="keyword">null</span> || path.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"路径为空!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line"></span><br><span class="line">        zkClient = <span class="keyword">new</span> ZkClient(<span class="string">"localhost:2181"</span>);</span><br><span class="line"></span><br><span class="line">        zkClient.setZkSerializer(<span class="keyword">new</span> CustomSerializer());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!zkClient.exists(path)) &#123;</span><br><span class="line">                zkClient.createPersistent(path, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZkNodeExistsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//尝试获取分布式锁，若获取不到则等待，监听到上一个兄弟节点删除后，再次尝试获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (!tryLock()) &#123;</span><br><span class="line">            <span class="comment">//阻塞等待</span></span><br><span class="line">            waitForLock();</span><br><span class="line">            <span class="comment">//再次竞争分布式锁</span></span><br><span class="line">            lock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">"尝试获取分布式锁..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先创建临时顺序节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentPath.get() == <span class="keyword">null</span> || !zkClient.exists(currentPath.get())) &#123;</span><br><span class="line">            String node = zkClient.createEphemeralSequential(path + <span class="string">"/"</span>, <span class="string">"locked"</span>);</span><br><span class="line">            currentPath.set(node);</span><br><span class="line">            reenterCount.set(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有节点</span></span><br><span class="line">        List&lt;String&gt; childList = zkClient.getChildren(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有子节点排序</span></span><br><span class="line">        Collections.sort(childList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若是最小节点，可获得锁</span></span><br><span class="line">        <span class="keyword">if</span> (currentPath.get().equals(path + <span class="string">"/"</span> + childList.get(<span class="number">0</span>))) &#123;</span><br><span class="line">            <span class="comment">//重入计数+1</span></span><br><span class="line">            reenterCount.set(reenterCount.get() + <span class="number">1</span>);</span><br><span class="line">            logger.info(Thread.currentThread().getName() + <span class="string">"获得分布式锁..."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取上一个兄弟节点</span></span><br><span class="line">            <span class="keyword">int</span> currentIndex = childList.indexOf(currentPath.get().substring(path.length() + <span class="number">1</span>));</span><br><span class="line">            String node = path + <span class="string">"/"</span> + childList.get(currentIndex - <span class="number">1</span>);</span><br><span class="line">            beforePath.set(node);</span><br><span class="line">            logger.info(Thread.currentThread().getName() + <span class="string">"获取分布式锁失败..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(Thread.currentThread() + <span class="string">"释放当前分布式锁"</span>);</span><br><span class="line">        <span class="keyword">if</span> (reenterCount.get() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//重入次数-1，释放锁</span></span><br><span class="line">            reenterCount.set(reenterCount.get() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentPath.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            zkClient.delete(currentPath.get());</span><br><span class="line">            currentPath.set(<span class="keyword">null</span>);</span><br><span class="line">            reenterCount.set(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">waitForLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//监听上一个兄弟节点数据变更</span></span><br><span class="line">        IZkDataListener dataListener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String s, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">"监听到节点删除"</span>);</span><br><span class="line">                downLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">"监听到节点变更"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        zkClient.subscribeDataChanges(beforePath.get(), dataListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//阻塞自己</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient.exists(beforePath.get())) &#123;</span><br><span class="line">            logger.info(Thread.currentThread().getName() + <span class="string">"分布式锁没有抢到，进入阻塞状态"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                downLatch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消监听</span></span><br><span class="line">        zkClient.unsubscribeDataChanges(beforePath.get(), dataListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>基于开源工具curator</p><p>curator框架封装了分布式锁机制，使用起来简单方便，仅需要创建InterProcessMutex对象，调用acquire方法尝试获取锁，方法支持超时可选参数；调用release释放锁，对于开发者而言，使用分布式锁犹如使用Java API一样方便，其底层实现原理是类似的，只不过框架做了很好的封装，对上层调用着透明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用Curator框架+Zookeeper实现分布式锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorDistributedLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义重试次数</span></span><br><span class="line">        RetryPolicy policy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="string">"192.168.200.56:2181"</span>, policy);</span><br><span class="line"></span><br><span class="line">        client.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建分布式锁</span></span><br><span class="line">        InterProcessMutex mutex = <span class="keyword">new</span> InterProcessMutex(client, <span class="string">"/curator/lock"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//尝试获取锁，最多等待5秒</span></span><br><span class="line">            flag = mutex.acquire(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread"</span> + Thread.currentThread().getName() + <span class="string">",分布式锁获取成功，并执行业务...."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread"</span> + Thread.currentThread().getName() + <span class="string">",分布式锁获取失败...."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mutex.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Zookeeper应用-分布式锁&quot;&gt;&lt;a href=&quot;#Zookeeper应用-分布式锁&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper应用-分布式锁&quot;&gt;&lt;/a&gt;Zookeeper应用-分布式锁&lt;/h2&gt;&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么需要分布式锁?&lt;/p&gt;
&lt;p&gt;单机环境，应用程序都部署在同一台服务器上，并发环境下为了控制多线程对临界资源的安全访问，我们通常可以加锁实现，单机环境下的多线程同属于同一个JVM中的同一个进程之内，可通过Java锁机制确保线程安全，但分布式环境下应用程序部署于多台机器，当多台机器并发执行相同的应用程序时，就有可能出现问题，比如消息推送服务部署于A，B两台机器，当同时触发发送系统消息时，若不加控制，用户就可能收到2条重复的消息，基于此类场景，需要分布式的锁来协调分布式服务的并发调用。例如存在以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量A存在于JVM1、JVM2、JVM3三个内存中&lt;/li&gt;
&lt;li&gt;请求1、2、3到达时对变量进行操作，因为变量A存储于3个不同的JVM内存区域，显然变量操作不具备可见性&lt;/li&gt;
&lt;li&gt;并发下需要维护变量数据A的一致性，确保各个节点数据同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种应用场景下分布式锁被引入用于协调和控制分布式服务调用，确保数据一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/10/13/uvbamd.png&quot; alt=&quot;分布式服务访问&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分布式锁基本条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式环境下，同一时间一个方法仅能被一台机器的一个线程执行&lt;/li&gt;
&lt;li&gt;获取与释放锁高可用&lt;/li&gt;
&lt;li&gt;获取于释放锁高性能&lt;/li&gt;
&lt;li&gt;锁可重入&lt;/li&gt;
&lt;li&gt;锁具备失效机制，防止持有锁的线程崩溃造成死锁&lt;/li&gt;
&lt;li&gt;非阻塞，没有争抢到锁的线程直接返回或获取锁失败&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常见分布式锁解决方案&lt;br&gt;业界有很多分布式锁的实现方案，比较常见的有基于Redis缓存、基于数据库等，本文主要针对zookeeper分布式锁分析实现，基于Redis和数据库仅作原理性介绍，本文不深入探讨。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于Redis&lt;/p&gt;
&lt;p&gt;Redis天然具备高性能、单线程的特性，可以利用其特性实现分布式锁，主要使用setnx加锁，并对锁设置超时时间，超时时自动释放锁，改方案要注意加锁及解锁姿势；基于数据库的核心思想主要是利用数据库唯一约束确保多线程互斥执行，此方案依赖数据库服务的可用性，会增加数据库压力，现实中很少用。&lt;/p&gt;
&lt;p&gt;zookeeper是一个分布式服务协调框架，内部结构类似于unix文件系统，是一种树型结构，但与文件系统不同的时，其路径节点上可以存储数据znode。zookeeper具有持久节点和临时节点2种并且可维护有序性，当客户端与服务器断开连接时，临时节点自动删除，基于临时节点+有序性+watch机制就可以非常简单方便的实现zookeeper分布式锁。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://google12071.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式核心" scheme="https://google12071.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>常用安全算法</title>
    <link href="https://google12071.github.io/2019/02/27/%E5%B8%B8%E7%94%A8%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95/"/>
    <id>https://google12071.github.io/2019/02/27/常用安全算法/</id>
    <published>2019-02-27T15:52:55.000Z</published>
    <updated>2019-10-13T10:34:31.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用安全算法"><a href="#常用安全算法" class="headerlink" title="常用安全算法"></a>常用安全算法</h1><blockquote><p>常用的安全算法主要包括摘要算法、对称加密算法、非对称加密算法、数字签名等。掌握常用算法的原理与应用场景对于开发者来说至关重要。</p></blockquote><h3 id="一、信息编码"><a href="#一、信息编码" class="headerlink" title="一、信息编码"></a>一、信息编码</h3><ul><li><p>十六进制</p><p>二进制和16进制都是计算机世界中常用的表示数据的方法，且它们之间可以相互转换，每4位二进制数据对应一位16进制数据。 16进制采用0-9、A-F对应10进制的0-9，10-15，开发中我们经常会遇到字节和16进制的转化，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"> <span class="comment">/** 字节转十六进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 需要进行转换的byte字节</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的Hex字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteToHex</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    String hex = Integer.toHexString(b &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">if</span> (hex.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        hex = <span class="string">"0"</span> + hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hex字符串转byte</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inHex 待转换的Hex字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">hexToByte</span><span class="params">(String inHex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">byte</span>) Integer.parseInt(inHex, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字节数组转16进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes 需要转换的byte数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的Hex字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHex</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">        String hex = Integer.toHexString(bytes[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">if</span> (hex.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            sb.append(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(hex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hex字符串转byte数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inHex 待转换的Hex字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的byte数组结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexToByteArray(String inHex) &#123;</span><br><span class="line">    <span class="keyword">int</span> hexlen = inHex.length();</span><br><span class="line">    <span class="keyword">byte</span>[] result;</span><br><span class="line">    <span class="keyword">if</span> (hexlen % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//奇数</span></span><br><span class="line">        hexlen++;</span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">byte</span>[(hexlen / <span class="number">2</span>)];</span><br><span class="line">        inHex = <span class="string">"0"</span> + inHex;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//偶数</span></span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">byte</span>[(hexlen / <span class="number">2</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexlen; i += <span class="number">2</span>) &#123;</span><br><span class="line">        result[j] = hexToByte(inHex.substring(i, i + <span class="number">2</span>));</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Base64编码</p><p>Base64编码不是一种加密算法而是一种编码规则，它基于64个可打印字符来表示二进制数据，每6个二进制位对应一个可打印字符，在Base64编码中可打印字符包括A-Z、a-z、0-9这62个字符，另外2个字符因系统不同而有所差异。</p><p>Base64编码常用于网络数据传输，日常开发中常与二进制数据相互转换，JDK中BASE64Encoder和BASE64Decoder类可以很好的帮助我们完成此转换工作。</p><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 字节数组转成Base64编码</span></span><br><span class="line"><span class="comment"> * @param bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteToBase64</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(bytes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64转成字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> base64Str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] base64ToByte(String base64Str)<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BASE64Decoder().decodeBuffer(base64Str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="二、数字摘要"><a href="#二、数字摘要" class="headerlink" title="二、数字摘要"></a>二、数字摘要</h3><ul><li>原理</li></ul><p>​      数字摘要又称为之消息摘要，它是一个唯一对应消息或文本的固定长度的值。原文与摘要之间采用单向哈希函数完成映射。假设存在关在关键字k1、k2，若k1&lt;&gt;k2，但f(k1)=f(k2),则这种现象称为Hash碰撞。良好的晒要算法需要使发生Hash碰撞的概率大大降低。</p><ul><li><p>MD5</p><p>MD5因其普遍、稳定、快速的特点，已经在业界得到广泛应用，常用于签名校验等。目前主流的编程语言，都有MD5加密的对应实现，Java中示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 普通文本MD5转换成字节数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toMD5(String text) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       MessageDigest digest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">       <span class="keyword">return</span> digest.digest(text.getBytes(<span class="string">"utf8"</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>SHA</p><p> SHA基于MD4算法，现已称为公认最安全的散列算法之一，改算法生成摘要信息的长度为160位，在相同的硬件环境下，计算速度比MD5更慢，但也更安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 普通文本SHA-1转换成字节数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toSHA1(String text) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      MessageDigest digest = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">      <span class="keyword">return</span> digest.digest(text.getBytes(<span class="string">"utf8"</span>));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、对称加密算法"><a href="#三、对称加密算法" class="headerlink" title="三、对称加密算法"></a>三、对称加密算法</h3><p> 早起的加密算法都是基于对称加密实现，加密和解密双方共同约定一份密钥并采用相同的算法进行加密、解密，因为密钥是一致的，因此称之为对称加密算法。对称加密的特点是算法公开、计算量小、加解密速度快，加密效率高，但算法的安全性依赖于密钥的长度和保密性，密钥一旦泄漏，任何人都可以对根据算法对加密后的内容逆向解密，对称加密解密过程如下图所示：常见的对称加密算法包括DES算法、3DES、AES算法等。</p><p><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1g0ldbbb2nij30jr04lmxb.jpg" alt></p><ul><li><p>DES</p><p>明文按64位进行分组，密钥长64位，其中除去8个校验位，其余有56位参与DES运算，由于现代计算机运算能力的增强，使得DES算法被暴力破解称为可能，因此安全性更高的3DES，它使用3条56位的密钥对数据进行3次加密，是向AES过度的一种对称加密算法</p></li><li><p>AES</p><p>AES是DES的高级版，现已被广泛使用，它作为新一代的加密标准，具备强安全性、高性能、高效率等特点，算法设计128、192、256三个可选密钥长度，已经成为对称加密算法等首选,它比DES加密强度更高。DES和AES算法Java实现代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择对称加密算法生成密钥</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keySize 密钥长度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">DESKeyGenerate</span><span class="params">(String algorithm,Integer keySize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       KeyGenerator keyGenerator = KeyGenerator.getInstance(algorithm);</span><br><span class="line">       <span class="comment">//设置算法的密钥长度</span></span><br><span class="line">       keyGenerator.init(keySize);</span><br><span class="line">       <span class="comment">//生成密钥对象</span></span><br><span class="line">       SecretKey secretKey = keyGenerator.generateKey();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(secretKey.getEncoded());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> base64Key 密钥base64编码字符串</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 加密算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title">getSecretKey</span><span class="params">(String base64Key,String algorithm)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] keyBytes = <span class="keyword">new</span> BASE64Decoder().decodeBuffer(base64Key);</span><br><span class="line">       SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(keyBytes, algorithm);</span><br><span class="line">       <span class="keyword">return</span> secretKey;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择算法加密</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> text 明文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> secretKey 密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrpt</span><span class="params">(String text,String algorithm,SecretKey secretKey)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] source = text.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">       Cipher cipher = Cipher.getInstance(algorithm);</span><br><span class="line">       cipher.init(Cipher.ENCRYPT_MODE, secretKey);</span><br><span class="line">       <span class="comment">//DES算法加密后得到字节数组Base64编码</span></span><br><span class="line">       <span class="keyword">byte</span>[] bytes = cipher.doFinal(source);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(bytes);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择算法解密</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> encrptText 密文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> secretKey 密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrpt</span><span class="params">(String encrptText,String algorithm,SecretKey secretKey)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] encrptByte = <span class="keyword">new</span> BASE64Decoder().decodeBuffer(encrptText);</span><br><span class="line">       Cipher cipher = Cipher.getInstance(algorithm);</span><br><span class="line">       cipher.init(Cipher.DECRYPT_MODE, secretKey);</span><br><span class="line">       <span class="comment">//DES算法解密后得到字节数组</span></span><br><span class="line">       <span class="keyword">byte</span>[] bytes = cipher.doFinal(encrptByte);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、非对称加密算法"><a href="#四、非对称加密算法" class="headerlink" title="四、非对称加密算法"></a>四、非对称加密算法</h3><p> 非对称加密算法又称之为公开密钥加密算法，它需要公钥、私钥配对使用，公钥可以由任何人获得，但私钥各自保留一份，当公钥加密时需要对应的私钥才能解密，反之当私钥加密时必须用公钥才能解密。</p><p> 非对称加密采用公私密钥对完成加密解密过程，相对于对称加密算法，它无需传输加密密钥，及时公钥和源代码泄漏，由于私钥的隐私性，仍然无法破解秘文，因此具有更高的安全性。</p><p> 非对称加密算法因其高度安全性，加密过程复杂，因此性能不足于对称加密算法，日常应用中常常结合二者的有点来完成加密，比如用非对称加密算法加密密钥，然后用对称加密算法进行数据通信的加密、解密。非对称加密算法应用最广泛的非RSA算法莫属，RSA算法的数学原理，可以查阅专业资料，在此不再展开论述，RSA算法的Java语言实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA生成公钥、私钥(通用)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">generateKeyPair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; keyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// KeyPairGenerator类用于生成公钥和私钥对，基于RSA算法生成对象</span></span><br><span class="line">            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="comment">// 初始化密钥对生成器，密钥大小为1024位</span></span><br><span class="line">            keyPairGen.initialize(<span class="number">1024</span>, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">            <span class="comment">// 生成一个密钥对，保存在keyPair中</span></span><br><span class="line">            KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line">            RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();   <span class="comment">// 得到私钥</span></span><br><span class="line">            RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();  <span class="comment">// 得到公钥</span></span><br><span class="line">            <span class="comment">//加密公钥模</span></span><br><span class="line">            BigInteger publicModules = publicKey.getModulus();</span><br><span class="line">            <span class="comment">//加密公钥指数</span></span><br><span class="line">            BigInteger publicExponent = publicKey.getPublicExponent();</span><br><span class="line">            <span class="comment">// 将公钥和私钥相关信息保存到Map</span></span><br><span class="line">            keyMap.put(<span class="string">"publicKey"</span>, <span class="keyword">new</span> String(Base64.encodeBase64(publicKey.getEncoded())));</span><br><span class="line">            keyMap.put(<span class="string">"publicModules"</span>, <span class="keyword">new</span> String(Base64.encodeBase64(publicModules.toByteArray())));</span><br><span class="line">            keyMap.put(<span class="string">"publicExponent"</span>, <span class="keyword">new</span> String(Base64.encodeBase64(publicExponent.toByteArray())));</span><br><span class="line">            keyMap.put(<span class="string">"privateKey"</span>, <span class="keyword">new</span> String(Base64.encodeBase64((privateKey.getEncoded()))));</span><br><span class="line">            <span class="keyword">return</span> keyMap;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"generateKeyPair occur error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA生成公钥、私钥对.(对接C#)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">generateKeyPairSpecial</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, String&gt; keyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//生成公私钥对</span></span><br><span class="line">            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            keyPairGen.initialize(<span class="number">1024</span>);</span><br><span class="line">            KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line">            PublicKey publicKey = keyPair.getPublic();</span><br><span class="line">            PrivateKey privateKey = keyPair.getPrivate();</span><br><span class="line">            <span class="comment">//将公钥和模进行Base64编码</span></span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            RSAPublicKeySpec publicSpec = keyFactory.getKeySpec(publicKey, RSAPublicKeySpec.class);</span><br><span class="line">            BigInteger modulus = publicSpec.getModulus();</span><br><span class="line">            BigInteger exponent = publicSpec.getPublicExponent();</span><br><span class="line">            <span class="keyword">byte</span>[] ary_m = modulus.toByteArray();</span><br><span class="line">            <span class="keyword">byte</span>[] ary_e = exponent.toByteArray();</span><br><span class="line">            String str_m;</span><br><span class="line">            String str_e;</span><br><span class="line">            <span class="keyword">if</span> (ary_m[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; ary_m.length == <span class="number">129</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[ary_m.length - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ary_m.length; i++) &#123;</span><br><span class="line">                    temp[i - <span class="number">1</span>] = ary_m[i];</span><br><span class="line">                &#125;</span><br><span class="line">                str_m = Base64.encodeBase64String(temp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str_m = Base64.encodeBase64String(ary_m);</span><br><span class="line">            &#125;</span><br><span class="line">            str_e = Base64.encodeBase64String(ary_e);</span><br><span class="line">            <span class="comment">// 将公钥和私钥相关信息保存到Map</span></span><br><span class="line">            keyMap.put(<span class="string">"publicKey"</span>, Base64.encodeBase64String(publicKey.getEncoded()));</span><br><span class="line">            keyMap.put(<span class="string">"publicModules"</span>, str_m);</span><br><span class="line">            keyMap.put(<span class="string">"publicExponent"</span>, str_e);</span><br><span class="line">            keyMap.put(<span class="string">"privateKey"</span>, Base64.encodeBase64String(privateKey.getEncoded()));</span><br><span class="line">            <span class="keyword">return</span> keyMap;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"generateKeyPairSpecial occur error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text  加密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥Base64编码字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String text, String publicKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//base64编码的公钥</span></span><br><span class="line">            <span class="keyword">byte</span>[] decoded = Base64.decodeBase64(publicKey);</span><br><span class="line">            RSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(decoded));</span><br><span class="line">            <span class="comment">//RSA加密</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, pubKey);</span><br><span class="line">            String outStr = Base64.encodeBase64String(cipher.doFinal(text.getBytes(<span class="string">"UTF-8"</span>)));</span><br><span class="line">            <span class="keyword">return</span> outStr;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"RSAGenerator encrypt occur error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptedText 解密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥Base64编码字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String encryptedText, String privateKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//64位解码加密后的字符串</span></span><br><span class="line">            <span class="keyword">byte</span>[] inputByte = Base64.decodeBase64(encryptedText.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            <span class="comment">//base64编码的私钥</span></span><br><span class="line">            <span class="keyword">byte</span>[] decoded = Base64.decodeBase64(privateKey);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//RSA解密</span></span><br><span class="line">            RSAPrivateKey priKey = (RSAPrivateKey) KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(decoded));</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, priKey);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cipher.doFinal(inputByte));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"RSAGenerator decrypt occur error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1g0ldc84v8dj30l6090js5.jpg" alt></p><p><strong>RSA算法原理参考</strong></p><ul><li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="noopener">RSA算法原理一</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="noopener">RSA算法原理二</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用安全算法&quot;&gt;&lt;a href=&quot;#常用安全算法&quot; class=&quot;headerlink&quot; title=&quot;常用安全算法&quot;&gt;&lt;/a&gt;常用安全算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;常用的安全算法主要包括摘要算法、对称加密算法、非对称加密算法、数字签名等。掌握常用算法的原理与应用场景对于开发者来说至关重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、信息编码&quot;&gt;&lt;a href=&quot;#一、信息编码&quot; class=&quot;headerlink&quot; title=&quot;一、信息编码&quot;&gt;&lt;/a&gt;一、信息编码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;十六进制&lt;/p&gt;
&lt;p&gt;二进制和16进制都是计算机世界中常用的表示数据的方法，且它们之间可以相互转换，每4位二进制数据对应一位16进制数据。 16进制采用0-9、A-F对应10进制的0-9，10-15，开发中我们经常会遇到字节和16进制的转化，代码示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/** 字节转十六进制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; b 需要进行转换的byte字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; 转换后的Hex字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;byteToHex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String hex = Integer.toHexString(b &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFF&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hex.length() &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hex = &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; + hex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Hex字符串转byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; inHex 待转换的Hex字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; 转换后的byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hexToByte&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String inHex)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) Integer.parseInt(inHex, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 字节数组转16进制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; bytes 需要转换的byte数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; 转换后的Hex字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;bytesToHex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] bytes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringBuffer sb = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String hex = Integer.toHexString(bytes[i] &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFF&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hex.length() &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sb.append(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sb.append(hex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sb.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * hex字符串转byte数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; inHex 待转换的Hex字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; 转换后的byte数组结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] hexToByteArray(String inHex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hexlen = inHex.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hexlen % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//奇数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hexlen++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[(hexlen / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inHex = &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; + inHex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//偶数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[(hexlen / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; hexlen; i += &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result[j] = hexToByte(inHex.substring(i, i + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Base64编码&lt;/p&gt;
&lt;p&gt;Base64编码不是一种加密算法而是一种编码规则，它基于64个可打印字符来表示二进制数据，每6个二进制位对应一个可打印字符，在Base64编码中可打印字符包括A-Z、a-z、0-9这62个字符，另外2个字符因系统不同而有所差异。&lt;/p&gt;
&lt;p&gt;Base64编码常用于网络数据传输，日常开发中常与二进制数据相互转换，JDK中BASE64Encoder和BASE64Decoder类可以很好的帮助我们完成此转换工作。&lt;/p&gt;
&lt;p&gt;代码示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 字节数组转成Base64编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;byteToBase64&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] bytes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BASE64Encoder().encode(bytes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * base64转成字节数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; base64Str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; Exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] base64ToByte(String base64Str)&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BASE64Decoder().decodeBuffer(base64Str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java核心" scheme="https://google12071.github.io/categories/Java%E6%A0%B8%E5%BF%83/"/>
    
    
      <category term="安全基础" scheme="https://google12071.github.io/tags/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
