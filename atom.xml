<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简恒の博客</title>
  
  <subtitle>求于至简，归于永恒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://google12071.github.io/"/>
  <updated>2019-10-13T10:58:36.319Z</updated>
  <id>https://google12071.github.io/</id>
  
  <author>
    <name>google12071</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zookeeper应用-分布式锁</title>
    <link href="https://google12071.github.io/2019/10/13/Zookeeper%E5%BA%94%E7%94%A8-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://google12071.github.io/2019/10/13/Zookeeper应用-分布式锁/</id>
    <published>2019-10-13T10:22:55.000Z</published>
    <updated>2019-10-13T10:58:36.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper应用-分布式锁"><a href="#Zookeeper应用-分布式锁" class="headerlink" title="Zookeeper应用-分布式锁"></a>Zookeeper应用-分布式锁</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><ul><li><p>为什么需要分布式锁?</p><p>单机环境，应用程序都部署在同一台服务器上，并发环境下为了控制多线程对临界资源的安全访问，我们通常可以加锁实现，单机环境下的多线程同属于同一个JVM中的同一个进程之内，可通过Java锁机制确保线程安全，但分布式环境下应用程序部署于多台机器，当多台机器并发执行相同的应用程序时，就有可能出现问题，比如消息推送服务部署于A，B两台机器，当同时触发发送系统消息时，若不加控制，用户就可能收到2条重复的消息，基于此类场景，需要分布式的锁来协调分布式服务的并发调用。例如存在以下场景：</p><ul><li>变量A存在于JVM1、JVM2、JVM3三个内存中</li><li>请求1、2、3到达时对变量进行操作，因为变量A存储于3个不同的JVM内存区域，显然变量操作不具备可见性</li><li>并发下需要维护变量数据A的一致性，确保各个节点数据同步</li></ul><p>这种应用场景下分布式锁被引入用于协调和控制分布式服务调用，确保数据一致性。</p><p><img src="https://s2.ax1x.com/2019/10/13/uvbamd.png" alt="分布式服务访问"></p><a id="more"></a></li><li><p>分布式锁基本条件</p><ul><li>分布式环境下，同一时间一个方法仅能被一台机器的一个线程执行</li><li>获取与释放锁高可用</li><li>获取于释放锁高性能</li><li>锁可重入</li><li>锁具备失效机制，防止持有锁的线程崩溃造成死锁</li><li>非阻塞，没有争抢到锁的线程直接返回或获取锁失败</li></ul></li><li><p>常见分布式锁解决方案<br>业界有很多分布式锁的实现方案，比较常见的有基于Redis缓存、基于数据库等，本文主要针对zookeeper分布式锁分析实现，基于Redis和数据库仅作原理性介绍，本文不深入探讨。</p><ul><li><p>基于Redis</p><p>Redis天然具备高性能、单线程的特性，可以利用其特性实现分布式锁，主要使用setnx加锁，并对锁设置超时时间，超时时自动释放锁，改方案要注意加锁及解锁姿势；基于数据库的核心思想主要是利用数据库唯一约束确保多线程互斥执行，此方案依赖数据库服务的可用性，会增加数据库压力，现实中很少用。</p><p>zookeeper是一个分布式服务协调框架，内部结构类似于unix文件系统，是一种树型结构，但与文件系统不同的时，其路径节点上可以存储数据znode。zookeeper具有持久节点和临时节点2种并且可维护有序性，当客户端与服务器断开连接时，临时节点自动删除，基于临时节点+有序性+watch机制就可以非常简单方便的实现zookeeper分布式锁。</p></li></ul></li></ul><h3 id="二、基于Zookeeper分布式锁原理"><a href="#二、基于Zookeeper分布式锁原理" class="headerlink" title="二、基于Zookeeper分布式锁原理"></a>二、基于Zookeeper分布式锁原理</h3><ul><li><p>zookeeper获取分布式锁原理图</p><p>关于zookeeper znode、临时节点、有序性、watch机制等概念，不做过多介绍，网络上相关资料已经非常多，可自行查阅，zookeeper分布式锁的整体流程如下图：</p></li></ul><p><img src="https://s2.ax1x.com/2019/10/13/uv7DHI.png" alt="zookeeper分布式锁原理"></p><h3 id="三、Zookeeper分布式锁实践"><a href="#三、Zookeeper分布式锁实践" class="headerlink" title="三、Zookeeper分布式锁实践"></a>三、Zookeeper分布式锁实践</h3><ul><li>临时节点+有序性+watch机制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于zookeeper的分布式锁:</span></span><br><span class="line"><span class="comment"> *   利用临时顺序节点来实现分布式锁</span></span><br><span class="line"><span class="comment"> *   获取锁：取顺序号（类似银行排队拿号），判断自己的序号是否最小，若是则获得锁，否则注册前一个兄弟节点watcher，则阻塞等待</span></span><br><span class="line"><span class="comment"> *   释放锁：删除自己创建的临时顺序节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkDistributeAdvanceLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ZkDistributeAdvanceLock.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//协调线程的等待和唤醒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch downLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//锁节点目录</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//zookeeper连接客户端</span></span><br><span class="line">    <span class="keyword">private</span> ZkClient zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;String&gt; currentPath = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个兄弟节点路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;String&gt; beforePath = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可重入计数</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; reenterCount = ThreadLocal.withInitial(() -&gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZkDistributeAdvanceLock</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path == <span class="keyword">null</span> || path.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"路径为空!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line"></span><br><span class="line">        zkClient = <span class="keyword">new</span> ZkClient(<span class="string">"localhost:2181"</span>);</span><br><span class="line"></span><br><span class="line">        zkClient.setZkSerializer(<span class="keyword">new</span> CustomSerializer());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!zkClient.exists(path)) &#123;</span><br><span class="line">                zkClient.createPersistent(path, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZkNodeExistsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//尝试获取分布式锁，若获取不到则等待，监听到上一个兄弟节点删除后，再次尝试获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (!tryLock()) &#123;</span><br><span class="line">            <span class="comment">//阻塞等待</span></span><br><span class="line">            waitForLock();</span><br><span class="line">            <span class="comment">//再次竞争分布式锁</span></span><br><span class="line">            lock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">"尝试获取分布式锁..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先创建临时顺序节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentPath.get() == <span class="keyword">null</span> || !zkClient.exists(currentPath.get())) &#123;</span><br><span class="line">            String node = zkClient.createEphemeralSequential(path + <span class="string">"/"</span>, <span class="string">"locked"</span>);</span><br><span class="line">            currentPath.set(node);</span><br><span class="line">            reenterCount.set(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有节点</span></span><br><span class="line">        List&lt;String&gt; childList = zkClient.getChildren(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有子节点排序</span></span><br><span class="line">        Collections.sort(childList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若是最小节点，可获得锁</span></span><br><span class="line">        <span class="keyword">if</span> (currentPath.get().equals(path + <span class="string">"/"</span> + childList.get(<span class="number">0</span>))) &#123;</span><br><span class="line">            <span class="comment">//重入计数+1</span></span><br><span class="line">            reenterCount.set(reenterCount.get() + <span class="number">1</span>);</span><br><span class="line">            logger.info(Thread.currentThread().getName() + <span class="string">"获得分布式锁..."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取上一个兄弟节点</span></span><br><span class="line">            <span class="keyword">int</span> currentIndex = childList.indexOf(currentPath.get().substring(path.length() + <span class="number">1</span>));</span><br><span class="line">            String node = path + <span class="string">"/"</span> + childList.get(currentIndex - <span class="number">1</span>);</span><br><span class="line">            beforePath.set(node);</span><br><span class="line">            logger.info(Thread.currentThread().getName() + <span class="string">"获取分布式锁失败..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(Thread.currentThread() + <span class="string">"释放当前分布式锁"</span>);</span><br><span class="line">        <span class="keyword">if</span> (reenterCount.get() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//重入次数-1，释放锁</span></span><br><span class="line">            reenterCount.set(reenterCount.get() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentPath.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            zkClient.delete(currentPath.get());</span><br><span class="line">            currentPath.set(<span class="keyword">null</span>);</span><br><span class="line">            reenterCount.set(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">waitForLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//监听上一个兄弟节点数据变更</span></span><br><span class="line">        IZkDataListener dataListener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String s, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">"监听到节点删除"</span>);</span><br><span class="line">                downLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">"监听到节点变更"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        zkClient.subscribeDataChanges(beforePath.get(), dataListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//阻塞自己</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient.exists(beforePath.get())) &#123;</span><br><span class="line">            logger.info(Thread.currentThread().getName() + <span class="string">"分布式锁没有抢到，进入阻塞状态"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                downLatch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消监听</span></span><br><span class="line">        zkClient.unsubscribeDataChanges(beforePath.get(), dataListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>基于开源工具curator</p><p>curator框架封装了分布式锁机制，使用起来简单方便，仅需要创建InterProcessMutex对象，调用acquire方法尝试获取锁，方法支持超时可选参数；调用release释放锁，对于开发者而言，使用分布式锁犹如使用Java API一样方便，其底层实现原理是类似的，只不过框架做了很好的封装，对上层调用着透明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用Curator框架+Zookeeper实现分布式锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorDistributedLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义重试次数</span></span><br><span class="line">        RetryPolicy policy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="string">"192.168.200.56:2181"</span>, policy);</span><br><span class="line"></span><br><span class="line">        client.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建分布式锁</span></span><br><span class="line">        InterProcessMutex mutex = <span class="keyword">new</span> InterProcessMutex(client, <span class="string">"/curator/lock"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//尝试获取锁，最多等待5秒</span></span><br><span class="line">            flag = mutex.acquire(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread"</span> + Thread.currentThread().getName() + <span class="string">",分布式锁获取成功，并执行业务...."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread"</span> + Thread.currentThread().getName() + <span class="string">",分布式锁获取失败...."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mutex.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Zookeeper应用-分布式锁&quot;&gt;&lt;a href=&quot;#Zookeeper应用-分布式锁&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper应用-分布式锁&quot;&gt;&lt;/a&gt;Zookeeper应用-分布式锁&lt;/h2&gt;&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么需要分布式锁?&lt;/p&gt;
&lt;p&gt;单机环境，应用程序都部署在同一台服务器上，并发环境下为了控制多线程对临界资源的安全访问，我们通常可以加锁实现，单机环境下的多线程同属于同一个JVM中的同一个进程之内，可通过Java锁机制确保线程安全，但分布式环境下应用程序部署于多台机器，当多台机器并发执行相同的应用程序时，就有可能出现问题，比如消息推送服务部署于A，B两台机器，当同时触发发送系统消息时，若不加控制，用户就可能收到2条重复的消息，基于此类场景，需要分布式的锁来协调分布式服务的并发调用。例如存在以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量A存在于JVM1、JVM2、JVM3三个内存中&lt;/li&gt;
&lt;li&gt;请求1、2、3到达时对变量进行操作，因为变量A存储于3个不同的JVM内存区域，显然变量操作不具备可见性&lt;/li&gt;
&lt;li&gt;并发下需要维护变量数据A的一致性，确保各个节点数据同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种应用场景下分布式锁被引入用于协调和控制分布式服务调用，确保数据一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/10/13/uvbamd.png&quot; alt=&quot;分布式服务访问&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://google12071.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式核心" scheme="https://google12071.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>分布式全局唯一ID</title>
    <link href="https://google12071.github.io/2019/08/13/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID/"/>
    <id>https://google12071.github.io/2019/08/13/分布式全局唯一ID/</id>
    <published>2019-08-13T02:30:15.000Z</published>
    <updated>2019-10-13T10:54:53.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式全局唯一ID"><a href="#分布式全局唯一ID" class="headerlink" title="分布式全局唯一ID"></a>分布式全局唯一ID</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><ul><li><p><strong>为什么需要全局唯一</strong></p><p>在大型复杂的分布式系统中，常常会涉及用户、订单等各个子系统，随着数据日益增长，数据库需要分库分表，系统间的通信需要消息解耦合，数据或消息都需要唯一标识，便于数据的整合处理，例如对于电商系统而言，生成全局唯一的优惠券ID是非常必要的。</p></li><li><p><strong>需要全局唯一ID的场景</strong></p><ul><li>数据库主键</li><li>用户身份标识别</li><li>订单号</li><li>…</li></ul><p>根据业务场景的不同，需要生成的ID要求也不相同，例如，若仅仅用作标识，对有序性、存储长度及查询性能没有要求，则可以选择UUID，简单高效；若需要结合业务逻辑，比如生成每天产生的订单流水号，可以采用时间戳+每天原子递增序列；若系统存在高并发且集群众多，对唯一性要求较高，可以借助ZooKeeper使用类似Twitter的snowflake算法，根据时间戳+机器+序列号生成唯一ID。</p></li><li><p><strong>ID主键基本要求</strong></p><p> 主键是数据库记录的唯一标识，也是主键索引的索引数据，所以主键ID需要满足以下条件</p><ul><li><p>全局唯一：不能出现重复，最基本需求</p></li><li><p>趋势递增：Mysql InnoDB引擎使用是聚簇索引，B+树数据结构存储索引数据，主键的有序利于提升性能,业务上也便于排序和分页。</p></li><li><p>单调递增：确保下一个生成的ID大于前一个ID</p></li><li><p>信息安全：若ID连续递增，容易暴露ID生成规则，可能会受到恶意遍历，某些场景下需要打乱ID生成规则</p><blockquote><p>单调递增和信息安全为互斥的两个概念，需要根据具体的业务场景作取舍，无法同时满足。</p></blockquote></li><li><p>高可用、高QPS、低延时</p><p>生成全局唯一ID的算法需要简单高效，若高并发查经下经常出现阻塞，则明显不能满足需求，同时负责产生全局唯一的生成器也必须是高可用的，否则会使得ID生成异常，部分业务会造成毁灭性的硬性，比如可能会导致订单ID生成失败，所以全局ID需要满足高可用、高QPS、低延时。</p><a id="more"></a></li></ul></li></ul><h3 id="二、常见生成方案"><a href="#二、常见生成方案" class="headerlink" title="二、常见生成方案"></a>二、常见生成方案</h3><ul><li><p>UUID</p><p>UUID是指一台机器在同一时间中生成的数字在所有机器中都是唯一的。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字<br>UUID由以下几部分的组合：<br>（1）当前日期时间。<br>（2）时钟序列。<br>（3）全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。<br>标准UUID格式为：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)，以连字号分为五段形式的36个字符，示例：550e8400-e29b-41d4-a716-446655440000。Java标准类库中已经提供了生成UUID的API，不再过多介绍。</p><ul><li><p>优点</p><ul><li>性能非常高：本地生成，没有网络消耗</li></ul></li><li><p>缺点</p><ul><li>存储困难： UUID通常为36位字符串，16字节，128位，很多场景不适用。</li><li>信息不安全：基于MAC地址生成UUID的算法可能会造成MAC地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。</li><li>无序且可读性差：UUID单纯为无序的字符串，不具备可读性，且若作为数据库主键，则读写性能较差。</li></ul></li></ul></li><li><p>数据库生成</p><p>以MySQL为例，利用给字段设置auto_increment、auto_increment_offset来保证ID自增，但每次业务使用下需要读写DB，获取ID号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> Tickets64 (stub) <span class="keyword">VALUES</span> (<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LAST_INSERT_ID</span>();</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><ul><li>单DB单机ID生成过程<img src="https://s2.ax1x.com/2019/10/13/uxp3b8.png" alt="mysql单机生成ID"></li></ul></li></ul><p>优点：简单方便，ID号单调自增      缺点：强依赖DB，DB异常时，则整个ID生成不可用</p><p>考虑到单机可能存在单点故障，则在分布式系统中，可部署多台机器，每台机器设置不同的初始值且步长和机器数相等。比如有两台机器，设置步长step为2，Server1的初始值为1（1，3，5，7，9，11…）、Server2的初始值为2（2，4，6，8，10…）。这是Flickr团队在2010年撰文介绍的一种主键生成策略（<a href="http://code.flickr.net/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/" target="_blank" rel="noopener">Ticket Servers: Distributed Unique Primary Keys on the Cheap </a>）。如下所示，为了实现上述方案分别设置两台机器对应的参数，Server1从1开始发号，Server2从2开始发号，两台机器每次发号之后步长都递增2。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Server1:</span><br><span class="line">auto-increment-increment = 2</span><br><span class="line">auto-increment-offset = 1</span><br><span class="line">Server2:</span><br><span class="line">auto-increment-increment = 2</span><br><span class="line">auto-increment-offset = 2</span><br></pre></td></tr></table></figure><p>假设我们要部署N台机器，步长需设置为N，每台的初始值依次为0,1,2…N-1那么整个架构就变成了如下图所示：</p><p><img src="https://s2.ax1x.com/2019/10/13/uxpa2n.png" alt="mysql多机生成ID"></p><p>这种架构貌似能满足性能，但存在以下缺点，现实中基本不用：</p><pre><code>- 系统水平扩展困难</code></pre><ul><li><p>强依赖DB，需要额外的DB资源，数据库压力大</p></li><li><p>Twitter snowflake（雪花算法）</p><p>SnowFlake算法是Twitter实现的ID生成方案，由时间戳+机器ID+序列号组成。</p><ul><li><p>1位符号位：始终为0，Java中long为有符号类型，ID一般为正数，则最高位固定为0</p></li><li><p>41位时间戳：41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截 )得到的值，开始时间截，一般是id生成器开始使用的时间，可由程序灵活指定。</p></li><li><p>10位机器标识码：可部署1024个节点，如果机器分机房（IDC）部署，这10位可以由 <strong>5位机房ID + 5位机器ID</strong> 组成。</p></li><li><p>12位序列：毫秒内计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号</p><p>ID生成结构如下图：</p></li></ul><p><img src="https://s2.ax1x.com/2019/10/13/uxpLRA.jpg" alt="snowflake-64"></p><p>优点：简单高效，生成速度快；时间戳在高位，自增序列在低位，ID生成趋势递增；灵活度高，可根据业务需求，调整bit位划分。</p><p>缺点：依赖机器时钟，若服务器发生时钟回拨，则可能会出现ID重复；分布式环境中，每个服务器的时钟可能非完全同步，ID有可能不是全局递增。</p><p>SnowFlake算法Java实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter_Snowflake&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span></span><br><span class="line"><span class="comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeIdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Fields===========================================</span></span><br><span class="line">    <span class="comment">/** 开始时间截 (2015-01-01) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> twepoch = <span class="number">1420041600000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大数据标识id，结果是31 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 序列在id中占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器ID向左移12位 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id向左移17位(12+5) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 时间截向左移22位(5+5+12) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 工作机器ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据中心ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 毫秒内序列(0~4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 上次生成ID的时间截 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Constructors=====================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId 工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowflakeIdGenerator</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Methods==========================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Test=============================================</span></span><br><span class="line">    <span class="comment">/** 测试 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SnowflakeIdGenerator idWorker = <span class="keyword">new</span> SnowflakeIdGenerator(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">            System.out.println(Long.toBinaryString(id));</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>Redis自增原子性</p><p>利用Redis单线程性，可以利用时间戳+原子自增ID生成全局唯一ID,RedisAtomicLong可以保证生成ID原子递增，生成格式如：2019092100001（时间戳+自增序列），其中自增序列位数可根据实际业务调整。redis可设置过期时间。</p><p>优点：线程安全，生成ID单调递增，可读性强</p><p>缺点：需要借助Redis，RedisTemplate需要注入，强依赖redis</p><p>若系统存在线程安全问题，又需要ID全局唯一，且需要趋势递增，可考虑使用改方法。ID长度可根据具体业务确定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用Redis自增原子性，生成递增的唯一ID，每日零点过期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdGenerateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(IdGenerateUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成唯一key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key       Redis Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix    key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expired   是否过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minLength 生成key最小长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateCode</span><span class="params">(String key, String prefix, Boolean expired, Integer minLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date = <span class="keyword">null</span>;</span><br><span class="line">            Long id = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (expired) &#123;</span><br><span class="line">                Calendar calendar = Calendar.getInstance();</span><br><span class="line">                calendar.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">                calendar.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">                calendar.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line">                calendar.set(Calendar.MILLISECOND, <span class="number">999</span>);</span><br><span class="line">                date = calendar.getTime();</span><br><span class="line">            &#125;</span><br><span class="line">            id = generateId(key, date);</span><br><span class="line">            <span class="keyword">return</span> format(id, prefix, date, minLength);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"generateCode error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回自增ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  Long <span class="title">generateId</span><span class="params">(String key, Date date)</span> </span>&#123;</span><br><span class="line">        RedisAtomicLong counter = <span class="keyword">new</span> RedisAtomicLong(key, redisClient.getConnectionFactory());</span><br><span class="line">        counter.expireAt(date);</span><br><span class="line">        <span class="keyword">return</span> counter.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化日期格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 自增ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minLength 最小长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">format</span><span class="params">(Long id, String prefix, Date date, Integer minLength)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sb.append(prefix);</span><br><span class="line">        <span class="keyword">if</span> (date != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">            sb.append(df.format(date));</span><br><span class="line">        &#125;</span><br><span class="line">        String strId = String.valueOf(id);</span><br><span class="line">        <span class="keyword">int</span> length = strId.length();</span><br><span class="line">        <span class="keyword">if</span> (length &lt; minLength) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; minLength - length; i++) &#123;</span><br><span class="line">                sb.append(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(strId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(strId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>​       本文对分布式系统生成全局唯一ID方案进行了梳理，为满足不同的业务需求，我们常常要参考各种方案然后选择适合自己业务的算法，其中UUID最简单，性能最优但无法满足趋势递增，有序等特性；基于数据库自增主键，需要额外维护DB资源，且扩容困难；snowflake算法生成ID可靠，但实现复杂，存在时钟回拨的可能；基于Redis的ID单调递增，但也强依赖于redis，具体方案的选择需要case by case。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分布式全局唯一ID&quot;&gt;&lt;a href=&quot;#分布式全局唯一ID&quot; class=&quot;headerlink&quot; title=&quot;分布式全局唯一ID&quot;&gt;&lt;/a&gt;分布式全局唯一ID&lt;/h2&gt;&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;为什么需要全局唯一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在大型复杂的分布式系统中，常常会涉及用户、订单等各个子系统，随着数据日益增长，数据库需要分库分表，系统间的通信需要消息解耦合，数据或消息都需要唯一标识，便于数据的整合处理，例如对于电商系统而言，生成全局唯一的优惠券ID是非常必要的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;需要全局唯一ID的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库主键&lt;/li&gt;
&lt;li&gt;用户身份标识别&lt;/li&gt;
&lt;li&gt;订单号&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据业务场景的不同，需要生成的ID要求也不相同，例如，若仅仅用作标识，对有序性、存储长度及查询性能没有要求，则可以选择UUID，简单高效；若需要结合业务逻辑，比如生成每天产生的订单流水号，可以采用时间戳+每天原子递增序列；若系统存在高并发且集群众多，对唯一性要求较高，可以借助ZooKeeper使用类似Twitter的snowflake算法，根据时间戳+机器+序列号生成唯一ID。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ID主键基本要求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 主键是数据库记录的唯一标识，也是主键索引的索引数据，所以主键ID需要满足以下条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局唯一：不能出现重复，最基本需求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;趋势递增：Mysql InnoDB引擎使用是聚簇索引，B+树数据结构存储索引数据，主键的有序利于提升性能,业务上也便于排序和分页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单调递增：确保下一个生成的ID大于前一个ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;信息安全：若ID连续递增，容易暴露ID生成规则，可能会受到恶意遍历，某些场景下需要打乱ID生成规则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单调递增和信息安全为互斥的两个概念，需要根据具体的业务场景作取舍，无法同时满足。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高可用、高QPS、低延时&lt;/p&gt;
&lt;p&gt;生成全局唯一ID的算法需要简单高效，若高并发查经下经常出现阻塞，则明显不能满足需求，同时负责产生全局唯一的生成器也必须是高可用的，否则会使得ID生成异常，部分业务会造成毁灭性的硬性，比如可能会导致订单ID生成失败，所以全局ID需要满足高可用、高QPS、低延时。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://google12071.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式核心" scheme="https://google12071.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务管理基础</title>
    <link href="https://google12071.github.io/2019/04/13/Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <id>https://google12071.github.io/2019/04/13/Spring事务管理基础/</id>
    <published>2019-04-13T11:30:23.000Z</published>
    <updated>2019-10-13T10:59:05.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring事务管理基础"><a href="#Spring事务管理基础" class="headerlink" title="Spring事务管理基础"></a>Spring事务管理基础</h1><h3 id="一、数据库事务"><a href="#一、数据库事务" class="headerlink" title="一、数据库事务"></a>一、数据库事务</h3><blockquote><p>Spring事务依赖于数据库底层的事务处理机制，通过redolog（重执行日志）来保证原子性、一致性和持久性，重做日志记录了数据库变化的每一个动作，事务执行过程中发生异常时，可根据重做日志撤销已执行操作。”一荣俱荣，一损俱损”很好的体现了事务的核心思想,反应到数据库上，执行多条SQL语句时，要么所有执行成功，要么所有执行失败回滚操作。</p></blockquote> <a id="more"></a><ul><li><p>ACID事务特性</p><ul><li><p>Atomic（原子性）</p><p>组成事务的多个数据库操作同为一个不可分割的单元，要么操作全部执行成功，要么其中出现操作失败而回滚。</p></li><li><p>Consistency（一致性）</p><p><strong>数据一致性是最终的目标</strong>，事务操作成功后，数据库所处的状态和它的业务规则是一致的，并发事务操作时，常出现脏读、不可重复度、幻读，第一类丢失更新、第二类丢失更新等数据一致性问题，事务操作需要保证数据的一致性，它是数据库操作的重要目标。</p></li><li><p>Isolation（隔离性）</p><p><strong>Java采用对象锁机制进行线程同步，数据库采用数据库锁机制保证事务的隔离性，其中根据锁力度的不同，分为表级锁和行级锁。</strong>并发数据操作时，不同事务拥有各自的数据空间，数据库规定了多种事务隔离级别，隔离级别越高，数据一致性越好，并发性能越弱，合理选择事务隔离级别至关重要。</p></li><li><p>Durability（持久性）</p><p>事务成功提交后，事务中所有数据操作必须持久化到数据库中，数据的变更是永久性的，即使数据库崩溃，数据库重启时，也必须能够通过某种机制恢复数据。</p></li></ul></li></ul><ul><li><p>数据库并发问题</p><ul><li><p>脏读</p><p>事务A读取了事务B未成功提交的更改数据，并在这个数据的基础上进行操作。事务B回滚后，事务A之前读取的数据即为脏数据，以取款业务和转账业务为例。</p><p><img src="https://s2.ax1x.com/2019/10/13/ux9lW9.png" alt="image-20190609090049049"></p><blockquote><p>oracle数据库使用多版本机制，因此不会出现脏读问题</p></blockquote></li><li><p>不可重复读</p><p>事务A首先读取事务B提交更改前的数据，然后再次读取了事务B提交更改后数据，造成同一事务中，两次读取数据不一致，即为不可重复读。<strong>常采用行锁限制并发更新</strong></p><p><img src="https://s2.ax1x.com/2019/10/13/ux9Gsx.png" alt="image-20190609090422934"></p><p><img src="https://s2.ax1x.com/2019/10/13/ux9gw8.png" alt="image-20190609090506035"></p><p>同一事务中，T4和T7时间点，事务A读取到的数据不一致，即为不可重复读。</p></li><li><p>幻读</p><p>事务A读取到事务B提交的新增数据。<strong>常采用表锁限制并发新增</strong></p><p><img src="https://s2.ax1x.com/2019/10/13/ux92TS.png" alt="image-20190609090726567"></p><p>幻读和不可重复读是两个容易混淆的概念，前者指的是当前事务读取到了其他事务提交的新增数据，后者指的是读取了其他事务提交更改的数据。</p></li><li><p>第一类丢失更新</p><p>事务A撤销时，把事务B已提交更新覆盖了。</p><p><img src="https://s2.ax1x.com/2019/10/13/ux9WFg.png" alt="image-20190609091048306"></p><p><img src="https://s2.ax1x.com/2019/10/13/ux9Iln.png" alt="image-20190609091109844"></p></li><li><p>第二类丢失更新</p><p>事务A提交的更新覆盖了事务B提交的更新。</p><p><img src="https://s2.ax1x.com/2019/10/13/ux9TO0.png" alt="image-20190609091208056"></p></li></ul></li><li><p>数据库锁机制</p><ul><li><p>表级锁</p><p>锁定整张表，并发性能较弱，对于活跃度较高的表需谨慎操作。</p></li><li><p>行级锁</p><p>锁定特定行，兼容并发性和安全性，常采用这种级别的锁进行并发事务控制。</p></li></ul></li><li><p>事务隔离级别 </p><p><img src="https://s2.ax1x.com/2019/10/13/ux9OkF.png" alt="image-20190524195428629"></p><p>事务隔离级别和并发性是相互对立的，隔离级别越高，数据安全性越高，性能越低；反之，数据库隔离级别越低，并发性越高，安全性越低。开发过程中需要根据具体的业务场景，选择合理的事务隔离级别。</p></li></ul><h3 id="二、ThreadLocal"><a href="#二、ThreadLocal" class="headerlink" title="二、ThreadLocal"></a>二、ThreadLocal</h3><ul><li><p>ThreadLocal保障Spring中持久化操作的线程安全性</p><p>Spring通过各种模版类降低了开发者使用各种数据库持久化技术的难度，模版类访问数据库，需要绑定数据库连接或会话资源，这些资源本身是非线程安全的，ThreadLocal使每个访问线程具备独立的资源副本，使彼此之间相互隔离，保障线程的安全性，是一种空间换时间的策略。</p></li><li><p>ThreadLocal原理</p><p>ThreadLocal不是一个线程，而是保存线程本地对象的容器,ThreadLocal类比较简单，只有5个方法，内部通过维护一个Map，每个线程单独一份存储空间，互不影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化变量  </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置变量值 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">      map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      createMap(t, value);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//获取变量值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">      ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T result = (T)e.value;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//设置初始化变量值</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T value = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//删除变量值，不需要显示调用，GC会负责清理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">  <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">    m.remove(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  锁同步机制采用”<strong>时间换空间</strong>“的方式，通过锁机制实现访问的串行化；ThreadLocal为每一个线程都提供一个变量副本，相互之间互不影响，是一种”<strong>空间换时间</strong>“的策略。</p><ul><li><p>Spring 中使用ThreadLocal</p><p>一般情况下，只有无状态的Bean才可以在多线程环境中共享，Spring利用ThreadLocal对RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等非线程安全的状态性对象进行了封装，因此有状态的bean就能够以singleton的方式在多线程中工作，Spring事务管理中利用ThreadLocal这把利器，线程安全维护起来变得更加简单、方便。</p></li></ul><h3 id="三、Spring声明式事务"><a href="#三、Spring声明式事务" class="headerlink" title="三、Spring声明式事务"></a>三、Spring声明式事务</h3><ul><li><p>Spring事务管理核心类</p><p>​    Spring事务管理中最核心的类包括PlatformTransactionManager、TransactionDefinition和TransactionStatus，Spring为事务管理提供了统一的模版，在高层次建立了统一的事务抽象，另外Spring引入声明式事务，使得事务管理变得异常简单、方便。</p><ul><li><p>TransactionDefinition（描述事物隔离级别、传播机制、超时时间、是否为只读事务等属性）</p></li><li><p>TransactionStatus（描述事务的具体运行状态）</p></li><li>PlatformTransactionManager（根据TransactionDefinition事务定义创建事务、利用TransactionStatus描述事务运行状态）</li></ul></li></ul><p>Spring的声明式事务管理是通过Spring AOP实现，通过事务的声明性信息，Spring负责将事务管理逻辑动态织入业务方法的相应连接点中。Spring默认回滚规则为：<strong>运行期异常回滚，检查型异常不回滚</strong></p><ul><li><p>使用XML配置声明式事务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入DAO和DataSource配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:applicationContext-dao.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--利用切点表达式语言定义目标方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"serviceMethod"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">expression</span>=<span class="string">"execution(* com.smart.service.*Forum.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"serviceMethod"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义事务属性及声明事务方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">rollback-for</span>=<span class="string">"PessimisticLockingFailureException"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用注解配置Spring声明式事务 （推荐使用）</p><p> 采用注解配置前需要开启注解配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>@Transactional属性</p><p><img src="https://s2.ax1x.com/2019/10/13/ux9xp9.png" alt="image-20190609112821668"></p></li></ul><ul><li><p>何处标注@Transactional注解</p><p>@Transactional可用于修饰接口定义和接口方法，类定义和类的Public方法上，建议在Spring的业务实现类上使用@Transactional注解。<strong>方法处的@Transactional注解会覆盖类处的@Transactional注解</strong></p></li><li><p>多数据源多事务管理器</p><p>一般情况下，一个应用对于一个事务管理器，若需要连接多数据源，可以自定义一个绑定到特定事物管理器等等注解，然后就可以直接使用改事物管理器。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Transactional</span>(<span class="string">"topic"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TopicTransactional &#123;<span class="comment">//与topic事务管理器绑定</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//业务方法中直接饮用</span></span><br><span class="line"><span class="meta">@TopicTransactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTopic</span><span class="params">(Topic topic)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>Spring通过数据库底层事务管理机制进行事务管理，应用ThreadLocal使得非线程安全的对象各个线程独立一份，保证并发事务操作的安全性。Spring声明式事务，将业务处理与底层实现分离，通过AOP技术，大大降低代码侵入性，其中声明式事务可以通过注解及XML两种方式实现，推荐采用注解方式配置Spring事务管理，对于多数据源多事务管理器的应用，可自定义事务管理器注解，并于业务方法中直接引用，实现多数据源事务管理</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring事务管理基础&quot;&gt;&lt;a href=&quot;#Spring事务管理基础&quot; class=&quot;headerlink&quot; title=&quot;Spring事务管理基础&quot;&gt;&lt;/a&gt;Spring事务管理基础&lt;/h1&gt;&lt;h3 id=&quot;一、数据库事务&quot;&gt;&lt;a href=&quot;#一、数据库事务&quot; class=&quot;headerlink&quot; title=&quot;一、数据库事务&quot;&gt;&lt;/a&gt;一、数据库事务&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Spring事务依赖于数据库底层的事务处理机制，通过redolog（重执行日志）来保证原子性、一致性和持久性，重做日志记录了数据库变化的每一个动作，事务执行过程中发生异常时，可根据重做日志撤销已执行操作。”一荣俱荣，一损俱损”很好的体现了事务的核心思想,反应到数据库上，执行多条SQL语句时，要么所有执行成功，要么所有执行失败回滚操作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开源框架" scheme="https://google12071.github.io/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://google12071.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>常用安全算法</title>
    <link href="https://google12071.github.io/2019/02/27/%E5%B8%B8%E7%94%A8%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95/"/>
    <id>https://google12071.github.io/2019/02/27/常用安全算法/</id>
    <published>2019-02-27T15:52:55.000Z</published>
    <updated>2019-10-13T10:58:07.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用安全算法"><a href="#常用安全算法" class="headerlink" title="常用安全算法"></a>常用安全算法</h1><blockquote><p>常用的安全算法主要包括摘要算法、对称加密算法、非对称加密算法、数字签名等。掌握常用算法的原理与应用场景对于开发者来说至关重要。</p></blockquote><a id="more"></a><h3 id="一、信息编码"><a href="#一、信息编码" class="headerlink" title="一、信息编码"></a>一、信息编码</h3><ul><li><p>十六进制</p><p>二进制和16进制都是计算机世界中常用的表示数据的方法，且它们之间可以相互转换，每4位二进制数据对应一位16进制数据。 16进制采用0-9、A-F对应10进制的0-9，10-15，开发中我们经常会遇到字节和16进制的转化，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"> <span class="comment">/** 字节转十六进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 需要进行转换的byte字节</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的Hex字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteToHex</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    String hex = Integer.toHexString(b &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">if</span> (hex.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        hex = <span class="string">"0"</span> + hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hex字符串转byte</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inHex 待转换的Hex字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">hexToByte</span><span class="params">(String inHex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">byte</span>) Integer.parseInt(inHex, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字节数组转16进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes 需要转换的byte数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的Hex字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHex</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">        String hex = Integer.toHexString(bytes[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">if</span> (hex.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            sb.append(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(hex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hex字符串转byte数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inHex 待转换的Hex字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的byte数组结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexToByteArray(String inHex) &#123;</span><br><span class="line">    <span class="keyword">int</span> hexlen = inHex.length();</span><br><span class="line">    <span class="keyword">byte</span>[] result;</span><br><span class="line">    <span class="keyword">if</span> (hexlen % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//奇数</span></span><br><span class="line">        hexlen++;</span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">byte</span>[(hexlen / <span class="number">2</span>)];</span><br><span class="line">        inHex = <span class="string">"0"</span> + inHex;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//偶数</span></span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">byte</span>[(hexlen / <span class="number">2</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexlen; i += <span class="number">2</span>) &#123;</span><br><span class="line">        result[j] = hexToByte(inHex.substring(i, i + <span class="number">2</span>));</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Base64编码</p><p>Base64编码不是一种加密算法而是一种编码规则，它基于64个可打印字符来表示二进制数据，每6个二进制位对应一个可打印字符，在Base64编码中可打印字符包括A-Z、a-z、0-9这62个字符，另外2个字符因系统不同而有所差异。</p><p>Base64编码常用于网络数据传输，日常开发中常与二进制数据相互转换，JDK中BASE64Encoder和BASE64Decoder类可以很好的帮助我们完成此转换工作。</p><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 字节数组转成Base64编码</span></span><br><span class="line"><span class="comment"> * @param bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteToBase64</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(bytes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64转成字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> base64Str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] base64ToByte(String base64Str)<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BASE64Decoder().decodeBuffer(base64Str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、数字摘要"><a href="#二、数字摘要" class="headerlink" title="二、数字摘要"></a>二、数字摘要</h3><ul><li>原理</li></ul><p>​      数字摘要又称为之消息摘要，它是一个唯一对应消息或文本的固定长度的值。原文与摘要之间采用单向哈希函数完成映射。假设存在关在关键字k1、k2，若k1&lt;&gt;k2，但f(k1)=f(k2),则这种现象称为Hash碰撞。良好的晒要算法需要使发生Hash碰撞的概率大大降低。</p><ul><li><p>MD5</p><p>MD5因其普遍、稳定、快速的特点，已经在业界得到广泛应用，常用于签名校验等。目前主流的编程语言，都有MD5加密的对应实现，Java中示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 普通文本MD5转换成字节数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toMD5(String text) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       MessageDigest digest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">       <span class="keyword">return</span> digest.digest(text.getBytes(<span class="string">"utf8"</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>SHA</p><p> SHA基于MD4算法，现已称为公认最安全的散列算法之一，改算法生成摘要信息的长度为160位，在相同的硬件环境下，计算速度比MD5更慢，但也更安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 普通文本SHA-1转换成字节数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toSHA1(String text) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      MessageDigest digest = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">      <span class="keyword">return</span> digest.digest(text.getBytes(<span class="string">"utf8"</span>));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、对称加密算法"><a href="#三、对称加密算法" class="headerlink" title="三、对称加密算法"></a>三、对称加密算法</h3><p> 早起的加密算法都是基于对称加密实现，加密和解密双方共同约定一份密钥并采用相同的算法进行加密、解密，因为密钥是一致的，因此称之为对称加密算法。对称加密的特点是算法公开、计算量小、加解密速度快，加密效率高，但算法的安全性依赖于密钥的长度和保密性，密钥一旦泄漏，任何人都可以对根据算法对加密后的内容逆向解密，对称加密解密过程如下图所示：常见的对称加密算法包括DES算法、3DES、AES算法等。</p><p><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1g0ldbbb2nij30jr04lmxb.jpg" alt></p><ul><li><p>DES</p><p>明文按64位进行分组，密钥长64位，其中除去8个校验位，其余有56位参与DES运算，由于现代计算机运算能力的增强，使得DES算法被暴力破解称为可能，因此安全性更高的3DES，它使用3条56位的密钥对数据进行3次加密，是向AES过度的一种对称加密算法</p></li><li><p>AES</p><p>AES是DES的高级版，现已被广泛使用，它作为新一代的加密标准，具备强安全性、高性能、高效率等特点，算法设计128、192、256三个可选密钥长度，已经成为对称加密算法等首选,它比DES加密强度更高。DES和AES算法Java实现代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择对称加密算法生成密钥</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keySize 密钥长度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">DESKeyGenerate</span><span class="params">(String algorithm,Integer keySize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       KeyGenerator keyGenerator = KeyGenerator.getInstance(algorithm);</span><br><span class="line">       <span class="comment">//设置算法的密钥长度</span></span><br><span class="line">       keyGenerator.init(keySize);</span><br><span class="line">       <span class="comment">//生成密钥对象</span></span><br><span class="line">       SecretKey secretKey = keyGenerator.generateKey();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(secretKey.getEncoded());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> base64Key 密钥base64编码字符串</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 加密算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title">getSecretKey</span><span class="params">(String base64Key,String algorithm)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] keyBytes = <span class="keyword">new</span> BASE64Decoder().decodeBuffer(base64Key);</span><br><span class="line">       SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(keyBytes, algorithm);</span><br><span class="line">       <span class="keyword">return</span> secretKey;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择算法加密</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> text 明文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> secretKey 密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrpt</span><span class="params">(String text,String algorithm,SecretKey secretKey)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] source = text.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">       Cipher cipher = Cipher.getInstance(algorithm);</span><br><span class="line">       cipher.init(Cipher.ENCRYPT_MODE, secretKey);</span><br><span class="line">       <span class="comment">//DES算法加密后得到字节数组Base64编码</span></span><br><span class="line">       <span class="keyword">byte</span>[] bytes = cipher.doFinal(source);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(bytes);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择算法解密</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> encrptText 密文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> secretKey 密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrpt</span><span class="params">(String encrptText,String algorithm,SecretKey secretKey)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] encrptByte = <span class="keyword">new</span> BASE64Decoder().decodeBuffer(encrptText);</span><br><span class="line">       Cipher cipher = Cipher.getInstance(algorithm);</span><br><span class="line">       cipher.init(Cipher.DECRYPT_MODE, secretKey);</span><br><span class="line">       <span class="comment">//DES算法解密后得到字节数组</span></span><br><span class="line">       <span class="keyword">byte</span>[] bytes = cipher.doFinal(encrptByte);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、非对称加密算法"><a href="#四、非对称加密算法" class="headerlink" title="四、非对称加密算法"></a>四、非对称加密算法</h3><p> 非对称加密算法又称之为公开密钥加密算法，它需要公钥、私钥配对使用，公钥可以由任何人获得，但私钥各自保留一份，当公钥加密时需要对应的私钥才能解密，反之当私钥加密时必须用公钥才能解密。</p><p> 非对称加密采用公私密钥对完成加密解密过程，相对于对称加密算法，它无需传输加密密钥，及时公钥和源代码泄漏，由于私钥的隐私性，仍然无法破解秘文，因此具有更高的安全性。</p><p> 非对称加密算法因其高度安全性，加密过程复杂，因此性能不足于对称加密算法，日常应用中常常结合二者的有点来完成加密，比如用非对称加密算法加密密钥，然后用对称加密算法进行数据通信的加密、解密。非对称加密算法应用最广泛的非RSA算法莫属，RSA算法的数学原理，可以查阅专业资料，在此不再展开论述，RSA算法的Java语言实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA生成公钥、私钥(通用)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">generateKeyPair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; keyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// KeyPairGenerator类用于生成公钥和私钥对，基于RSA算法生成对象</span></span><br><span class="line">            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="comment">// 初始化密钥对生成器，密钥大小为1024位</span></span><br><span class="line">            keyPairGen.initialize(<span class="number">1024</span>, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">            <span class="comment">// 生成一个密钥对，保存在keyPair中</span></span><br><span class="line">            KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line">            RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();   <span class="comment">// 得到私钥</span></span><br><span class="line">            RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();  <span class="comment">// 得到公钥</span></span><br><span class="line">            <span class="comment">//加密公钥模</span></span><br><span class="line">            BigInteger publicModules = publicKey.getModulus();</span><br><span class="line">            <span class="comment">//加密公钥指数</span></span><br><span class="line">            BigInteger publicExponent = publicKey.getPublicExponent();</span><br><span class="line">            <span class="comment">// 将公钥和私钥相关信息保存到Map</span></span><br><span class="line">            keyMap.put(<span class="string">"publicKey"</span>, <span class="keyword">new</span> String(Base64.encodeBase64(publicKey.getEncoded())));</span><br><span class="line">            keyMap.put(<span class="string">"publicModules"</span>, <span class="keyword">new</span> String(Base64.encodeBase64(publicModules.toByteArray())));</span><br><span class="line">            keyMap.put(<span class="string">"publicExponent"</span>, <span class="keyword">new</span> String(Base64.encodeBase64(publicExponent.toByteArray())));</span><br><span class="line">            keyMap.put(<span class="string">"privateKey"</span>, <span class="keyword">new</span> String(Base64.encodeBase64((privateKey.getEncoded()))));</span><br><span class="line">            <span class="keyword">return</span> keyMap;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"generateKeyPair occur error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA生成公钥、私钥对.(对接C#)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">generateKeyPairSpecial</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, String&gt; keyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//生成公私钥对</span></span><br><span class="line">            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            keyPairGen.initialize(<span class="number">1024</span>);</span><br><span class="line">            KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line">            PublicKey publicKey = keyPair.getPublic();</span><br><span class="line">            PrivateKey privateKey = keyPair.getPrivate();</span><br><span class="line">            <span class="comment">//将公钥和模进行Base64编码</span></span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            RSAPublicKeySpec publicSpec = keyFactory.getKeySpec(publicKey, RSAPublicKeySpec.class);</span><br><span class="line">            BigInteger modulus = publicSpec.getModulus();</span><br><span class="line">            BigInteger exponent = publicSpec.getPublicExponent();</span><br><span class="line">            <span class="keyword">byte</span>[] ary_m = modulus.toByteArray();</span><br><span class="line">            <span class="keyword">byte</span>[] ary_e = exponent.toByteArray();</span><br><span class="line">            String str_m;</span><br><span class="line">            String str_e;</span><br><span class="line">            <span class="keyword">if</span> (ary_m[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; ary_m.length == <span class="number">129</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[ary_m.length - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ary_m.length; i++) &#123;</span><br><span class="line">                    temp[i - <span class="number">1</span>] = ary_m[i];</span><br><span class="line">                &#125;</span><br><span class="line">                str_m = Base64.encodeBase64String(temp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str_m = Base64.encodeBase64String(ary_m);</span><br><span class="line">            &#125;</span><br><span class="line">            str_e = Base64.encodeBase64String(ary_e);</span><br><span class="line">            <span class="comment">// 将公钥和私钥相关信息保存到Map</span></span><br><span class="line">            keyMap.put(<span class="string">"publicKey"</span>, Base64.encodeBase64String(publicKey.getEncoded()));</span><br><span class="line">            keyMap.put(<span class="string">"publicModules"</span>, str_m);</span><br><span class="line">            keyMap.put(<span class="string">"publicExponent"</span>, str_e);</span><br><span class="line">            keyMap.put(<span class="string">"privateKey"</span>, Base64.encodeBase64String(privateKey.getEncoded()));</span><br><span class="line">            <span class="keyword">return</span> keyMap;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"generateKeyPairSpecial occur error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text  加密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥Base64编码字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String text, String publicKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//base64编码的公钥</span></span><br><span class="line">            <span class="keyword">byte</span>[] decoded = Base64.decodeBase64(publicKey);</span><br><span class="line">            RSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(decoded));</span><br><span class="line">            <span class="comment">//RSA加密</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, pubKey);</span><br><span class="line">            String outStr = Base64.encodeBase64String(cipher.doFinal(text.getBytes(<span class="string">"UTF-8"</span>)));</span><br><span class="line">            <span class="keyword">return</span> outStr;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"RSAGenerator encrypt occur error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptedText 解密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥Base64编码字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String encryptedText, String privateKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//64位解码加密后的字符串</span></span><br><span class="line">            <span class="keyword">byte</span>[] inputByte = Base64.decodeBase64(encryptedText.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            <span class="comment">//base64编码的私钥</span></span><br><span class="line">            <span class="keyword">byte</span>[] decoded = Base64.decodeBase64(privateKey);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//RSA解密</span></span><br><span class="line">            RSAPrivateKey priKey = (RSAPrivateKey) KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(decoded));</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, priKey);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cipher.doFinal(inputByte));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"RSAGenerator decrypt occur error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1g0ldc84v8dj30l6090js5.jpg" alt></p><p><strong>RSA算法原理参考</strong></p><ul><li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="noopener">RSA算法原理一</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="noopener">RSA算法原理二</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用安全算法&quot;&gt;&lt;a href=&quot;#常用安全算法&quot; class=&quot;headerlink&quot; title=&quot;常用安全算法&quot;&gt;&lt;/a&gt;常用安全算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;常用的安全算法主要包括摘要算法、对称加密算法、非对称加密算法、数字签名等。掌握常用算法的原理与应用场景对于开发者来说至关重要。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java核心" scheme="https://google12071.github.io/categories/Java%E6%A0%B8%E5%BF%83/"/>
    
    
      <category term="安全基础" scheme="https://google12071.github.io/tags/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
