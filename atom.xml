<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简恒の博客</title>
  
  <subtitle>求于至简，归于永恒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://google12071.github.io/"/>
  <updated>2019-02-27T15:53:39.629Z</updated>
  <id>https://google12071.github.io/</id>
  
  <author>
    <name>google12071</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用安全算法</title>
    <link href="https://google12071.github.io/2019/02/27/%E5%B8%B8%E7%94%A8%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95/"/>
    <id>https://google12071.github.io/2019/02/27/常用安全算法/</id>
    <published>2019-02-27T15:52:55.000Z</published>
    <updated>2019-02-27T15:53:39.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用安全算法"><a href="#常用安全算法" class="headerlink" title="常用安全算法"></a>常用安全算法</h1><blockquote><p>常用的安全算法主要包括摘要算法、对称加密算法、非对称加密算法、数字签名等。掌握常用算法的原理与应用场景对于开发者来说至关重要。</p></blockquote><h3 id="一、信息编码"><a href="#一、信息编码" class="headerlink" title="一、信息编码"></a>一、信息编码</h3><ul><li><p>十六进制</p><p>二进制和16进制都是计算机世界中常用的表示数据的方法，且它们之间可以相互转换，每4位二进制数据对应一位16进制数据。 16进制采用0-9、A-F对应10进制的0-9，10-15，开发中我们经常会遇到字节和16进制的转化，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"> <span class="comment">/** 字节转十六进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 需要进行转换的byte字节</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的Hex字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteToHex</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    String hex = Integer.toHexString(b &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">if</span> (hex.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        hex = <span class="string">"0"</span> + hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hex字符串转byte</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inHex 待转换的Hex字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">hexToByte</span><span class="params">(String inHex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">byte</span>) Integer.parseInt(inHex, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字节数组转16进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes 需要转换的byte数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的Hex字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHex</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">        String hex = Integer.toHexString(bytes[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">if</span> (hex.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            sb.append(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(hex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hex字符串转byte数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inHex 待转换的Hex字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的byte数组结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexToByteArray(String inHex) &#123;</span><br><span class="line">    <span class="keyword">int</span> hexlen = inHex.length();</span><br><span class="line">    <span class="keyword">byte</span>[] result;</span><br><span class="line">    <span class="keyword">if</span> (hexlen % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//奇数</span></span><br><span class="line">        hexlen++;</span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">byte</span>[(hexlen / <span class="number">2</span>)];</span><br><span class="line">        inHex = <span class="string">"0"</span> + inHex;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//偶数</span></span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">byte</span>[(hexlen / <span class="number">2</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexlen; i += <span class="number">2</span>) &#123;</span><br><span class="line">        result[j] = hexToByte(inHex.substring(i, i + <span class="number">2</span>));</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Base64编码</p><p>Base64编码不是一种加密算法而是一种编码规则，它基于64个可打印字符来表示二进制数据，每6个二进制位对应一个可打印字符，在Base64编码中可打印字符包括A-Z、a-z、0-9这62个字符，另外2个字符因系统不同而有所差异。</p><p>Base64编码常用于网络数据传输，日常开发中常与二进制数据相互转换，JDK中BASE64Encoder和BASE64Decoder类可以很好的帮助我们完成此转换工作。</p><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 字节数组转成Base64编码</span></span><br><span class="line"><span class="comment"> * @param bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteToBase64</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(bytes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64转成字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> base64Str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] base64ToByte(String base64Str)<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BASE64Decoder().decodeBuffer(base64Str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、数字摘要"><a href="#二、数字摘要" class="headerlink" title="二、数字摘要"></a>二、数字摘要</h3><ul><li>原理</li></ul><p>​      数字摘要又称为之消息摘要，它是一个唯一对应消息或文本的固定长度的值。原文与摘要之间采用单向哈希函数完成映射。假设存在关在关键字k1、k2，若k1&lt;&gt;k2，但f(k1)=f(k2),则这种现象称为Hash碰撞。良好的晒要算法需要使发生Hash碰撞的概率大大降低。</p><ul><li><p>MD5</p><p>MD5因其普遍、稳定、快速的特点，已经在业界得到广泛应用，常用于签名校验等。目前主流的编程语言，都有MD5加密的对应实现，Java中示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 普通文本MD5转换成字节数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toMD5(String text) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       MessageDigest digest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">       <span class="keyword">return</span> digest.digest(text.getBytes(<span class="string">"utf8"</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>SHA</p><p> SHA基于MD4算法，现已称为公认最安全的散列算法之一，改算法生成摘要信息的长度为160位，在相同的硬件环境下，计算速度比MD5更慢，但也更安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 普通文本SHA-1转换成字节数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toSHA1(String text) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      MessageDigest digest = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">      <span class="keyword">return</span> digest.digest(text.getBytes(<span class="string">"utf8"</span>));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、对称加密算法"><a href="#三、对称加密算法" class="headerlink" title="三、对称加密算法"></a>三、对称加密算法</h3><p>​    早起的加密算法都是基于对称加密实现，加密和解密双方共同约定一份密钥并采用相同的算法进行加密、解密，因为密钥是一致的，因此称之为对称加密算法。对称加密的特点是算法公开、计算量小、加解密速度快，加密效率高，但算法的安全性依赖于密钥的长度和保密性，密钥一旦泄漏，任何人都可以对根据算法对加密后的内容逆向解密，对称加密解密过程如下图所示：常见的对称加密算法包括DES算法、3DES、AES算法等。</p><p><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1g0ldbbb2nij30jr04lmxb.jpg" alt></p><ul><li><p>DES</p><p>明文按64位进行分组，密钥长64位，其中除去8个校验位，其余有56位参与DES运算，由于现代计算机运算能力的增强，使得DES算法被暴力破解称为可能，因此安全性更高的3DES，它使用3条56位的密钥对数据进行3次加密，是向AES过度的一种对称加密算法</p></li><li><p>AES</p><p>AES是DES的高级版，现已被广泛使用，它作为新一代的加密标准，具备强安全性、高性能、高效率等特点，算法设计128、192、256三个可选密钥长度，已经成为对称加密算法等首选,它比DES加密强度更高。DES和AES算法Java实现代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择对称加密算法生成密钥</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keySize 密钥长度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">DESKeyGenerate</span><span class="params">(String algorithm,Integer keySize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       KeyGenerator keyGenerator = KeyGenerator.getInstance(algorithm);</span><br><span class="line">       <span class="comment">//设置算法的密钥长度</span></span><br><span class="line">       keyGenerator.init(keySize);</span><br><span class="line">       <span class="comment">//生成密钥对象</span></span><br><span class="line">       SecretKey secretKey = keyGenerator.generateKey();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(secretKey.getEncoded());</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> base64Key 密钥base64编码字符串</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 加密算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title">getSecretKey</span><span class="params">(String base64Key,String algorithm)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] keyBytes = <span class="keyword">new</span> BASE64Decoder().decodeBuffer(base64Key);</span><br><span class="line">       SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(keyBytes, algorithm);</span><br><span class="line">       <span class="keyword">return</span> secretKey;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择算法加密</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> text 明文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> secretKey 密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrpt</span><span class="params">(String text,String algorithm,SecretKey secretKey)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] source = text.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">       Cipher cipher = Cipher.getInstance(algorithm);</span><br><span class="line">       cipher.init(Cipher.ENCRYPT_MODE, secretKey);</span><br><span class="line">       <span class="comment">//DES算法加密后得到字节数组Base64编码</span></span><br><span class="line">       <span class="keyword">byte</span>[] bytes = cipher.doFinal(source);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(bytes);</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择算法解密</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> encrptText 密文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> algorithm 算法（DES、AES）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> secretKey 密钥对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrpt</span><span class="params">(String encrptText,String algorithm,SecretKey secretKey)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] encrptByte = <span class="keyword">new</span> BASE64Decoder().decodeBuffer(encrptText);</span><br><span class="line">       Cipher cipher = Cipher.getInstance(algorithm);</span><br><span class="line">       cipher.init(Cipher.DECRYPT_MODE, secretKey);</span><br><span class="line">       <span class="comment">//DES算法解密后得到字节数组</span></span><br><span class="line">       <span class="keyword">byte</span>[] bytes = cipher.doFinal(encrptByte);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、非对称加密算法"><a href="#四、非对称加密算法" class="headerlink" title="四、非对称加密算法"></a>四、非对称加密算法</h3><p><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1g0ldc84v8dj30l6090js5.jpg" alt></p><h3 id="五、数字签名"><a href="#五、数字签名" class="headerlink" title="五、数字签名"></a>五、数字签名</h3>]]></content>
    
    <summary type="html">
    
      模版方法模式思想与实践
    
    </summary>
    
      <category term="Java核心" scheme="https://google12071.github.io/categories/Java%E6%A0%B8%E5%BF%83/"/>
    
    
      <category term="设计模式" scheme="https://google12071.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模版方法模式</title>
    <link href="https://google12071.github.io/2019/02/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://google12071.github.io/2019/02/23/设计模式之模版方法模式/</id>
    <published>2019-02-23T14:42:27.000Z</published>
    <updated>2019-02-23T14:50:47.643Z</updated>
    
    <summary type="html">
    
      模版方法模式思想与实践
    
    </summary>
    
      <category term="设计模式" scheme="https://google12071.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://google12071.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
